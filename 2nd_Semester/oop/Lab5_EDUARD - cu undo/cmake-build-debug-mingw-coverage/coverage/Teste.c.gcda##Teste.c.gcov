        -:    0:Source:C:/eu/ubb/2nd_Semester/oop/Lab5_EDUARD - Copy(before undo)/Teste.c
        -:    0:Graph:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD - Copy(before undo)\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\Teste.c.gcno
        -:    0:Data:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD - Copy(before undo)\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\Teste.c.gcda
        -:    0:Runs:1
        -:    1:#include "Teste.h"
        -:    2:#include <assert.h>
        -:    3:#include "service/Service.h"
        -:    4:#include <string.h>
        -:    5:#include "list/listamea.h"
        -:    6:
function test_adaugare called 1 returned 100% blocks executed 100%
        1:    7:void test_adaugare()
        -:    8:{
        1:    9:    ManagerLists store=createManagerList();
        1:    9-block  0
call    0 returned 1
        1:   10:	add(&store, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   11:	add(&store, "Sare", "Wizz", 200);
call    0 returned 1
        1:   12:	add(&store, "Miere", "Asus", 300);
call    0 returned 1
        1:   13:	destroyManagerList(&store);
call    0 returned 1
        1:   14:}
        -:   15:
function test_cautare called 1 returned 100% blocks executed 86%
        1:   16:void test_cautare()
        -:   17:{
        1:   18:	ManagerLists store=createManagerList();
        1:   18-block  0
call    0 returned 1
        1:   19:    add(&store, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   20:	add(&store, "Sare", "Wizz", 200);
call    0 returned 1
        1:   21:	add(&store, "Miere", "Asus", 300);
call    0 returned 1
       1*:   22:	assert(cauta(&store, "Miere") == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   22-block  0
call    3 never executed
        1:   22-block  1
       1*:   23:	assert(cauta(&store, "Paine") == -1);
        1:   23-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   23-block  1
call    3 never executed
        1:   23-block  2
        1:   24:    destroyManagerList(&store);
        1:   24-block  0
call    0 returned 1
        1:   25:}
        -:   26:
function test_update called 1 returned 100% blocks executed 89%
        1:   27:void test_update()
        -:   28:{
        1:   29:    ManagerLists store=createManagerList();
        1:   29-block  0
call    0 returned 1
        1:   30:    add(&store, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   31:	int index = cauta(&store, "Zahar");
call    0 returned 1
        1:   32:	update(&store, 150, index);
call    0 returned 1
       1*:   33:	assert(((Produs*)store.l->v[0])->cantitate == 250);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   33-block  0
call    2 never executed
        1:   33-block  1
        1:   34:    destroyManagerList(&store);
        1:   34-block  0
call    0 returned 1
        1:   35:}
        -:   36:
function test_remove called 1 returned 100% blocks executed 91%
        1:   37:void test_remove()
        -:   38:{
        1:   39:    ManagerLists store=createManagerList();
        1:   39-block  0
call    0 returned 1
        1:   40:    add(&store, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   41:	add(&store, "Sare", "Wizz", 200);
call    0 returned 1
        1:   42:	add(&store,"Miere", "Asus", 300);
call    0 returned 1
        1:   43:	int index = cauta(&store, "Zahar");
call    0 returned 1
        1:   44:	remove_prod(&store, index);
call    0 returned 1
       1*:   45:	assert(store.l->lungime == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   45-block  0
call    2 never executed
        1:   45-block  1
        1:   46:    destroyManagerList(&store);
        1:   46-block  0
call    0 returned 1
        1:   47:}
        -:   48:
function test_ordonare called 1 returned 100% blocks executed 87%
        1:   49:void test_ordonare() {
        1:   50:    ManagerLists store=createManagerList();
        1:   50-block  0
call    0 returned 1
        1:   51:    add(&store,"Zahar", "Tarom", 100);
call    0 returned 1
        1:   52:	add(&store,"Sare", "Wizz", 200);
call    0 returned 1
        1:   53:	add(&store,"Miere", "Asus", 300);
call    0 returned 1
        -:   54:
        1:   55:	MyList* aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:   56:	ordonare(&store, aux, criteriu_nume_cresc);
call    0 returned 1
       1*:   57:	assert(strcmp(((Produs*)aux->v[0])->denumire, "Miere") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  0
call    2 never executed
        1:   57-block  1
        1:   58:    destroyList(aux);
        1:   58-block  0
call    0 returned 1
        -:   59:
        1:   60:    aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:   61:	ordonare(&store, aux, criteriu_nume_descr);
call    0 returned 1
       1*:   62:	assert(strcmp(((Produs*)aux->v[0])->denumire, "Zahar") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   62-block  0
call    2 never executed
        1:   62-block  1
        1:   63:    destroyList(aux);
        1:   63-block  0
call    0 returned 1
        -:   64:
        1:   65:	aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:   66:	ordonare(&store, aux, criteriu_cant_cresc);
call    0 returned 1
       1*:   67:	assert(((Produs*)aux->v[0])->cantitate == 100);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   67-block  0
call    2 never executed
        1:   67-block  1
        1:   68:    destroyList(aux);
        1:   68-block  0
call    0 returned 1
        -:   69:
        1:   70:	aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:   71:	ordonare(&store, aux, criteriu_cant_descr);
call    0 returned 1
       1*:   72:	assert(((Produs*)aux->v[0])->cantitate == 300);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   72-block  0
call    2 never executed
        1:   72-block  1
        1:   73:    destroyList(aux);
        1:   73-block  0
call    0 returned 1
        -:   74:
        1:   75:    destroyManagerList(&store);
call    0 returned 1
        1:   76:}
        -:   77:
function test_modificare called 1 returned 100% blocks executed 91%
        1:   78:void test_modificare() {
        1:   79:    ManagerLists store=createManagerList();
        1:   79-block  0
call    0 returned 1
        1:   80:    add(&store, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   81:	add(&store, "Sare", "Wizz", 200);
call    0 returned 1
        1:   82:	add(&store, "Miere", "Asus", 300);
call    0 returned 1
        1:   83:	int index = cauta(&store, "Zahar");
call    0 returned 1
        1:   84:	modificare(&store, index, 150);
call    0 returned 1
       1*:   85:	assert(((Produs*)store.l->v[0])->cantitate == 150);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   85-block  0
call    2 never executed
        1:   85-block  1
        1:   86:    destroyManagerList(&store);
        1:   86-block  0
call    0 returned 1
        1:   87:}
        -:   88:
function test_filtrLit called 1 returned 100% blocks executed 89%
        1:   89:void test_filtrLit() {
        1:   90:    ManagerLists store=createManagerList();
        1:   90-block  0
call    0 returned 1
        1:   91:    add(&store, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   92:	add(&store,"Sare", "Wizz", 200);
call    0 returned 1
        1:   93:	add(&store,"Zanzibar", "Bolt", 150);
call    0 returned 1
        1:   94:	add(&store,"Miere", "Asus", 300);
call    0 returned 1
        1:   95:	MyList* aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        -:   96:
        1:   97:	filtr_litera(&store, aux, "Z");
call    0 returned 1
       1*:   98:	assert(aux->lungime == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   98-block  0
call    2 never executed
        1:   98-block  1
        1:   99:	eliberator(aux);
        1:   99-block  0
call    0 returned 1
        -:  100:
        1:  101:	aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:  102:	filtr_litera(&store, aux, "B");
call    0 returned 1
       1*:  103:	assert(aux->lungime == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  103-block  0
call    2 never executed
        1:  103-block  1
        1:  104:    eliberator(aux);
        1:  104-block  0
call    0 returned 1
        -:  105:
        1:  106:    destroyManagerList(&store);
call    0 returned 1
        1:  107:}
        -:  108:
function test_filtrCant called 1 returned 100% blocks executed 89%
        1:  109:void test_filtrCant() {
        1:  110:    ManagerLists store=createManagerList();
        1:  110-block  0
call    0 returned 1
        1:  111:    add(&store,"Zahar", "Tarom", 100);
call    0 returned 1
        1:  112:	add(&store,"Sare", "Wizz", 200);
call    0 returned 1
        1:  113:	add(&store,"Miere", "Asus", 300);
call    0 returned 1
        -:  114:
        1:  115:	MyList* aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:  116:	filtr_cantitate(&store, aux, 100);
call    0 returned 1
       1*:  117:	assert(aux->lungime == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  117-block  0
call    2 never executed
        1:  117-block  1
        1:  118:    eliberator(aux);
        1:  118-block  0
call    0 returned 1
        -:  119:
        1:  120:	aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:  121:	filtr_cantitate(&store, aux, 400);
call    0 returned 1
       1*:  122:	assert(aux->lungime == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  122-block  0
call    2 never executed
        1:  122-block  1
        1:  123:    eliberator(aux);
        1:  123-block  0
call    0 returned 1
        -:  124:
        1:  125:    destroyManagerList(&store);
call    0 returned 1
        1:  126:}
function test_filtrProd called 1 returned 100% blocks executed 89%
        1:  127:void test_filtrProd() {
        1:  128:    ManagerLists store=createManagerList();
        1:  128-block  0
call    0 returned 1
        1:  129:    add(&store,"Zahar", "Tarom", 100);
call    0 returned 1
        1:  130:    add(&store,"Sare", "Tarom", 200);
call    0 returned 1
        1:  131:    add(&store,"Miere", "Asus", 300);
call    0 returned 1
        -:  132:
        1:  133:    MyList* aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:  134:    filtr_producator(&store, aux, "Tarom");
call    0 returned 1
       1*:  135:    assert(aux->lungime == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  135-block  0
call    2 never executed
        1:  135-block  1
        1:  136:    eliberator(aux);
        1:  136-block  0
call    0 returned 1
        -:  137:
        1:  138:    aux= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:  139:    filtr_producator(&store, aux, "asus");
call    0 returned 1
       1*:  140:    assert(aux->lungime == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  140-block  0
call    2 never executed
        1:  140-block  1
        1:  141:    eliberator(aux);
        1:  141-block  0
call    0 returned 1
        -:  142:
        1:  143:    destroyManagerList(&store);
call    0 returned 1
        1:  144:}
function test_validare called 1 returned 100% blocks executed 76%
        1:  145:void test_validare()
        -:  146:{
       1*:  147:	assert(validare_cantitate(500));
        1:  147-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  147-block  1
call    3 never executed
        1:  147-block  2
       1*:  148:	assert(!validare_cantitate(-100));
        1:  148-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  148-block  1
call    3 never executed
        1:  148-block  2
       1*:  149:	assert(validare_nume("Zahar"));
        1:  149-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  149-block  1
call    3 never executed
        1:  149-block  2
       1*:  150:	assert(!validare_nume("Ae"));
        1:  150-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  150-block  1
call    3 never executed
        1:  150-block  2
       1*:  151:	assert(validare_producator("Tarom"));
        1:  151-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  151-block  1
call    3 never executed
        1:  151-block  2
       1*:  152:	assert(!validare_producator("Ae"));
        1:  152-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  152-block  1
call    3 never executed
        1:  152-block  2
        1:  153:}
function test_liste_liste called 1 returned 100% blocks executed 80%
        1:  154:void test_liste_liste()
        -:  155:{
        1:  156:    MyList* l= createList((void (*)(void *)) destroyPr);
        1:  156-block  0
call    0 returned 1
        1:  157:    MyList* undo= createList((void (*)(void *)) destroyPr);
call    0 returned 1
        1:  158:    addToList(undo, l);
call    0 returned 1
       1*:  159:    assert(l->lungime==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  159-block  0
call    2 never executed
        1:  159-block  1
       1*:  160:    assert(undo->lungime==1);
        1:  160-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  160-block  1
call    2 never executed
        1:  160-block  2
        1:  161:    addToList(l, crearePr("zahar","producator",7));
        1:  161-block  0
call    0 returned 1
call    1 returned 1
       1*:  162:    assert(l->lungime==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  162-block  0
call    2 never executed
        1:  162-block  1
       1*:  163:    assert(undo->lungime==1);
        1:  163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  163-block  1
call    2 never executed
        1:  163-block  2
        1:  164:    destroyList(l);
        1:  164-block  0
call    0 returned 1
        1:  165:    eliberator(undo);
call    0 returned 1
        1:  166:}
        -:  167://void printAll2(MyList* lista){
        -:  168://    for (int j = 0; j < lista->lungime; j++)
        -:  169://        printf("%s -- %s -- %d\n", ((Produs*)lista->v[j])->denumire, ((Produs*)lista->v[j])->producator, ((Produs*)lista->v[j])->cantitate);
        -:  170://
        -:  171://}
        -:  172://void printAll3(MyList* undo){
        -:  173://    for (int j = 0; j < undo->lungime; j++)
        -:  174://        printAll2(undo->v[j]);
        -:  175://}
function test_undo called 1 returned 100% blocks executed 79%
        1:  176:void test_undo()
        -:  177:{
        1:  178:    ManagerLists store=createManagerList();
        1:  178-block  0
call    0 returned 1
        -:  179:
        1:  180:    add(&store, "zahar","producator",7);
call    0 returned 1
        1:  181:    add(&store, "zahar","producator",7);
call    0 returned 1
       1*:  182:    assert(store.l->lungime==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  182-block  0
call    2 never executed
        1:  182-block  1
        -:  183:
        1:  184:    undoFunction(&store);
        1:  184-block  0
call    0 returned 1
       1*:  185:    assert(store.l->lungime==1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  185-block  0
call    2 never executed
        1:  185-block  1
        1:  186:    undoFunction(&store);
        1:  186-block  0
call    0 returned 1
       1*:  187:    assert(store.l->lungime==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  187-block  0
call    2 never executed
        1:  187-block  1
       1*:  188:    assert(undoFunction(&store)==1);
        1:  188-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  188-block  1
call    3 never executed
        1:  188-block  2
        -:  189:
        1:  190:    add(&store, "zahar", "producator", 100);
        1:  190-block  0
call    0 returned 1
        1:  191:    int index = cauta(&store, "zahar");
call    0 returned 1
        -:  192:
        1:  193:    update(&store, 150, index);
call    0 returned 1
       1*:  194:    assert(((Produs*)store.l->v[0])->cantitate == 250);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  194-block  0
call    2 never executed
        1:  194-block  1
        1:  195:    undoFunction(&store);
        1:  195-block  0
call    0 returned 1
       1*:  196:    assert(((Produs*)store.l->v[0])->cantitate == 100);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  196-block  0
call    2 never executed
        1:  196-block  1
        -:  197:
        1:  198:    index = cauta(&store, "zahar");
        1:  198-block  0
call    0 returned 1
        1:  199:    remove_prod(&store,index);
call    0 returned 1
       1*:  200:    assert(store.l->lungime==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  200-block  0
call    2 never executed
        1:  200-block  1
        1:  201:    undoFunction(&store);
        1:  201-block  0
call    0 returned 1
       1*:  202:    assert(cauta(&store, "zahar")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  202-block  0
call    3 never executed
        1:  202-block  1
       1*:  203:    assert(store.l->lungime==1);
        1:  203-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  203-block  1
call    2 never executed
        1:  203-block  2
        1:  204:    destroyManagerList(&store);
        1:  204-block  0
call    0 returned 1
        1:  205:}
