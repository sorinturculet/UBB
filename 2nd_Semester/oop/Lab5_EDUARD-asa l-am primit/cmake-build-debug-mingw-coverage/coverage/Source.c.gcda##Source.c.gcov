        -:    0:Source:C:/eu/ubb/2nd_Semester/oop/Lab5_EDUARD/Source.c
        -:    0:Graph:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\Source.c.gcno
        -:    0:Data:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\Source.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include "service/Service.h"
        -:    3:#include "Teste.h"
        -:    4:#include "list/listamea.h"
        -:    5:
        -:    6://Problema 6
        -:    7:
function adaugare called 0 returned 0% blocks executed 0%
    #####:    8:void adaugare(Lista* l) {
    #####:    9:	int ok = 1;
    #####:   10:	while (ok) {
    %%%%%:   10-block  0
    %%%%%:   10-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   11:		printf("Introduceti numele materiei prime: ");
    %%%%%:   11-block  0
call    0 never executed
        -:   12:		char nume[256];
    #####:   13:		scanf("%s", nume);
call    0 never executed
    #####:   14:		if (!validare_nume(nume)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   15:			printf("Numele materiei prime trebuie sa contina minim 3 litere!\n");
    %%%%%:   15-block  0
call    0 never executed
    #####:   16:			continue;
    %%%%%:   16-block  0
        -:   17:		}
    #####:   18:		printf("Introduceti numele producatorului: ");
    %%%%%:   18-block  0
call    0 never executed
        -:   19:		char prod[256];
    #####:   20:		scanf("%s", prod);
call    0 never executed
    #####:   21:		if (!validare_producator(prod)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   22:			printf("Numele producatorului trebuie sa contina minim 3 litere!\n");
    %%%%%:   22-block  0
call    0 never executed
    #####:   23:			continue;
        -:   24:		}
    #####:   25:		printf("Introduceti cantitatea: ");
    %%%%%:   25-block  0
call    0 never executed
        -:   26:		int cant;
    #####:   27:		scanf("%d", &cant);
call    0 never executed
    #####:   28:		if (!validare_cantitate(cant)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   29:			printf("Cantitate insuficienta!\n");
    %%%%%:   29-block  0
call    0 never executed
    #####:   30:			continue;
        -:   31:		}
    #####:   32:		int index = cauta(l, nume);
    %%%%%:   32-block  0
call    0 never executed
    #####:   33:		if (index == -1)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   34:		{
    #####:   35:			add(l, nume, prod, cant);
    %%%%%:   35-block  0
call    0 never executed
    #####:   36:			printf("Adaugarea a avut loc cu succes!\n");
call    0 never executed
        -:   37:		}
        -:   38:		else {
    #####:   39:			update(l, cant, index);
    %%%%%:   39-block  0
call    0 never executed
    #####:   40:			printf("Produsul exista deja in baza de date, stocul a fost actualizat\n");
call    0 never executed
        -:   41:		}
    #####:   42:		ok = 0;
    %%%%%:   42-block  0
        -:   43:	}
    #####:   44:}
        -:   45:
function modificare1 called 0 returned 0% blocks executed 0%
    #####:   46:void modificare1(Lista* l) {
    #####:   47:	int ok = 1;
    #####:   48:	while (ok) {
    %%%%%:   48-block  0
    %%%%%:   48-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   49:		printf("Introduceti numele produsului care doriti sa modificat din baza de date: ");
    %%%%%:   49-block  0
call    0 never executed
        -:   50:		char nume[256];
    #####:   51:		scanf("%s", nume);
call    0 never executed
    #####:   52:		if (!validare_nume(nume)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   53:			printf("Numele materiei prime trebuie sa contina minim 3 litere!\n");
    %%%%%:   53-block  0
call    0 never executed
    #####:   54:			continue;
        -:   55:		}
    #####:   56:		int index = cauta(l, nume);
    %%%%%:   56-block  0
call    0 never executed
    #####:   57:		if (index != -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   58:			printf("Introduceti cantitatea noua: ");
    %%%%%:   58-block  0
call    0 never executed
        -:   59:			int cant;
    #####:   60:			scanf("%d", &cant);
call    0 never executed
    #####:   61:			modificare(l, index, cant);
call    0 never executed
    #####:   62:			ok = 0;
    #####:   63:			printf("Modificarea a avut loc cu succes!");
call    0 never executed
        -:   64:		}
        -:   65:		else {
    #####:   66:			printf("Materia prima nu a fost gasita!");
    %%%%%:   66-block  0
call    0 never executed
        -:   67:		}
        -:   68:		
        -:   69:	}
    #####:   70:}
        -:   71:
function stergere called 0 returned 0% blocks executed 0%
    #####:   72:void stergere(Lista* l) {
    #####:   73:	int ok = 1;
    #####:   74:	while (ok) {
    %%%%%:   74-block  0
    %%%%%:   74-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   75:		printf("Introduceti numele produsului care doriti sa fie sters din baza de date: ");
    %%%%%:   75-block  0
call    0 never executed
        -:   76:		char nume[256];
    #####:   77:		scanf("%s", nume);
call    0 never executed
    #####:   78:		if (!validare_nume(nume)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:   79:			printf("Numele materiei prime trebuie sa contina minim 3 litere!\n");
    %%%%%:   79-block  0
call    0 never executed
    #####:   80:			continue;
        -:   81:		}
    #####:   82:		int index = cauta(l, nume);
    %%%%%:   82-block  0
call    0 never executed
    #####:   83:		if (index != -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   84:			remove_prod(l, index);
    %%%%%:   84-block  0
call    0 never executed
    #####:   85:			ok = 0;
    #####:   86:			printf("Produsul a fost sters cu succes!\n");
call    0 never executed
        -:   87:		}
        -:   88:		else {
    #####:   89:			printf("Materia prima nu a fost gasita!\n");
    %%%%%:   89-block  0
call    0 never executed
        -:   90:		}
        -:   91:	}
    #####:   92:}
        -:   93:
function vizualizare called 0 returned 0% blocks executed 0%
    #####:   94:void vizualizare(Lista* l) {
    #####:   95:	printf("1) Nume \n2) Cantitate \n0) Iesire\n");
    %%%%%:   95-block  0
call    0 never executed
        -:   96:	int optiune;
    #####:   97:	scanf("%d", &optiune);
call    0 never executed
        -:   98:
    #####:   99:	printf("1) Crescator \n2) Descrescator \n0) Iesire\n");
call    0 never executed
        -:  100:	int monotonie;
    #####:  101:	scanf("%d", &monotonie);
call    0 never executed
    #####:  102:	if ((optiune == 1 || optiune == 2) && (monotonie == 1 || monotonie == 2)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  102-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  102-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  102-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:  103:		Lista* lista=creareLi();
    %%%%%:  103-block  0
call    0 never executed
    #####:  104:		if(optiune == 1 && monotonie == 1)
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  104-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  105:			ordonare(l, lista, criteriu_nume_cresc);
    %%%%%:  105-block  0
call    0 never executed
    #####:  106:		else if (optiune == 1 && monotonie == 2)
    %%%%%:  106-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  106-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  107:			ordonare(l, lista, criteriu_nume_descr);
    %%%%%:  107-block  0
call    0 never executed
    #####:  108:		else if (optiune == 2 && monotonie == 1)
    %%%%%:  108-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  108-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  109:			ordonare(l, lista, criteriu_cant_cresc);
    %%%%%:  109-block  0
call    0 never executed
    #####:  110:		else if (optiune == 2 && monotonie == 2)
    %%%%%:  110-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  110-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  111:			ordonare(l, lista, criteriu_cant_descr);
    %%%%%:  111-block  0
call    0 never executed
    #####:  112:		for (int j = 0; j < lista->lungime; j++)
    %%%%%:  112-block  0
    %%%%%:  112-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  113:			printf("%s -- %s -- %d\n", lista->v[j]->denumire, lista->v[j]->producator, lista->v[j]->cantitate);
    %%%%%:  113-block  0
call    0 never executed
    #####:  114:		eliberator(lista);
    %%%%%:  114-block  0
call    0 never executed
        -:  115:	}
    #####:  116:	else printf("Introduceti valori adecvate!\n");
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:}
        -:  118:
function filtrare called 0 returned 0% blocks executed 0%
    #####:  119:void filtrare(Lista* l)
        -:  120:{
    #####:  121:	printf("1) Filtrare dupa prima litera \n2) Filtrare dupa cantitate mai mica decat un numar dat \n0) Iesire\n");
    %%%%%:  121-block  0
call    0 never executed
        -:  122:	int optiune;
    #####:  123:	scanf("%d", &optiune);
call    0 never executed
    #####:  124:	if (optiune == 1)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  125:	{
        -:  126:		char litera[20];
    #####:  127:		printf("Introduceti litera: ");
    %%%%%:  127-block  0
call    0 never executed
    #####:  128:		scanf("%s", litera);
call    0 never executed
    #####:  129:		Lista* lista=creareLi();
call    0 never executed
    #####:  130:		filtr_litera(l, lista, litera);
call    0 never executed
    #####:  131:		for (int j = 0; j < lista->lungime; j++)
    %%%%%:  131-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  132:		{
    #####:  133:			printf("%s -- %s -- %d\n", lista->v[j]->denumire, lista->v[j]->producator, lista->v[j]->cantitate);
    %%%%%:  133-block  0
call    0 never executed
        -:  134:		}
    #####:  135:		eliberator(lista);
    %%%%%:  135-block  0
call    0 never executed
        -:  136:	}
    #####:  137:	else if (optiune == 2) {
    %%%%%:  137-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  138:		int cant;
    #####:  139:		printf("Introduceti cantitatea: ");
    %%%%%:  139-block  0
call    0 never executed
    #####:  140:		scanf("%d", &cant);
call    0 never executed
    #####:  141:		Lista* lista=creareLi();
call    0 never executed
    #####:  142:		filtr_cantitate(l, lista, cant);
call    0 never executed
    #####:  143:		for (int j = 0; j < lista->lungime; j++)
    %%%%%:  143-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  144:		{
    #####:  145:			printf("%s -- %s -- %d\n", lista->v[j]->denumire, lista->v[j]->producator, lista->v[j]->cantitate);
    %%%%%:  145-block  0
call    0 never executed
        -:  146:		}
    #####:  147:		eliberator(lista);
    %%%%%:  147-block  0
call    0 never executed
        -:  148:	}
    #####:  149:}
function undo called 0 returned 0% blocks executed 0%
    #####:  150:void undo(Lista* l){
    #####:  151:    return ;
    %%%%%:  151-block  0
        -:  152:}
function load called 0 returned 0% blocks executed 0%
    #####:  153:void load(Lista* l){
        -:  154:
    #####:  155:    add(l, "Zahar", "Tarom", 100);
    %%%%%:  155-block  0
call    0 never executed
    #####:  156:    add(l, "Sare", "Wizz", 200);
call    0 never executed
    #####:  157:    add(l, "Miere", "Asus", 300);
call    0 never executed
    #####:  158:}
function printAll called 0 returned 0% blocks executed 0%
    #####:  159:void printAll(Lista* l){
    #####:  160:    for (int j = 0; j < l->lungime; j++)
    %%%%%:  160-block  0
    %%%%%:  160-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  161:        printf("%s -- %s -- %d\n", l->v[j]->denumire, l->v[j]->producator, l->v[j]->cantitate);
    %%%%%:  161-block  0
call    0 never executed
        -:  162:
    #####:  163:}
function start called 0 returned 0% blocks executed 0%
    #####:  164:void start()
        -:  165:{
    #####:  166:    Lista* l=creareLi();
    %%%%%:  166-block  0
call    0 never executed
    #####:  167:	int n = 1;
    #####:  168:	while (n != 0) {
    %%%%%:  168-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  169:		//system("cls");
    #####:  170:		printf("1) adaugare de materie prima (daca exista deja in stoc se actualizeaza cantitatea) \n2) modificare materie prima \n3) stergere  materie prima \n4) Vizualizare materii prime care satisfac un criteriu (numele incepe cu o litera data, cantitatea disponibila e mai mica decat un numar dat) \n5) Vizualizare materii prime din stoc ordonat dupa nume sau cantitate disponibila(crescator / descrescator) \n6)Undo 0) Iesire\n");
    %%%%%:  170-block  0
call    0 never executed
    #####:  171:		scanf("%d", &n);
call    0 never executed
    #####:  172:			switch (n) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  173:			case 1:
    #####:  174:				adaugare(l);
    %%%%%:  174-block  0
call    0 never executed
    #####:  175:				break;
    #####:  176:			case 2:
    #####:  177:				modificare1(l);
    %%%%%:  177-block  0
call    0 never executed
    #####:  178:				break;
    #####:  179:			case 3:
    #####:  180:				stergere(l);
    %%%%%:  180-block  0
call    0 never executed
    #####:  181:				break;
    #####:  182:			case 4:
    #####:  183:				filtrare(l);
    %%%%%:  183-block  0
call    0 never executed
    #####:  184:				break;
    #####:  185:			case 5:
    #####:  186:				vizualizare(l);
    %%%%%:  186-block  0
call    0 never executed
    #####:  187:				break;
    #####:  188:            case 6:
    #####:  189:                undo(l);
    %%%%%:  189-block  0
call    0 never executed
    #####:  190:                break;
    #####:  191:            case 11:
    #####:  192:                load(l);
    %%%%%:  192-block  0
call    0 never executed
    #####:  193:                break;
    #####:  194:            case 10:
    #####:  195:                printAll(l);
    %%%%%:  195-block  0
call    0 never executed
    #####:  196:                break;
    #####:  197:			case 0:
    #####:  198:				n = 0;
    #####:  199:				distrugator(l);
    %%%%%:  199-block  0
call    0 never executed
    #####:  200:				break;
    #####:  201:            default:
    #####:  202:                printf("Optiune invalid\n");
    %%%%%:  202-block  0
call    0 never executed
    #####:  203:                break;
        -:  204:			}
        -:  205:	}
    #####:  206:}
        -:  207:
function test_all called 1 returned 100% blocks executed 100%
        1:  208:void test_all()
        -:  209:{
        1:  210:	test_adaugare();
        1:  210-block  0
call    0 returned 1
        1:  211:	test_cautare();
call    0 returned 1
        1:  212:	test_update();
call    0 returned 1
        1:  213:	test_remove();
call    0 returned 1
        1:  214:    test_ordonare();
call    0 returned 1
        1:  215:	test_modificare();
call    0 returned 1
        1:  216:	test_filtrLit();
call    0 returned 1
        1:  217:    test_filtrCant();
call    0 returned 1
        1:  218:    test_validare();
call    0 returned 1
        1:  219:}
        -:  220:
function main called 1 returned 100% blocks executed 100%
        1:  221:int main()
        -:  222:{
        1:  223:	test_all();
        1:  223-block  0
call    0 returned 1
        -:  224:	//start();
        1:  225:	return 0;
        -:  226:}
