        -:    0:Source:C:/eu/ubb/2nd_Semester/oop/Lab5_EDUARD/service/Service.c
        -:    0:Graph:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\service\Service.c.gcno
        -:    0:Data:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\service\Service.c.gcda
        -:    0:Runs:1
        -:    1:#include "Service.h"
        -:    2:#include <string.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "list/listamea.h"
        -:    5:#pragma warning(disable: 6001)
        -:    6:
function add called 23 returned 100% blocks executed 100%
       23:    7:void add(Lista *lista, char nume[], char prod[], int cant)
        -:    8:{
       23:    9:	Produs* p = crearePr(nume, prod, cant);
       23:    9-block  0
call    0 returned 23
       23:   10:	adauga(lista, p);
call    0 returned 23
       23:   11:}
        -:   12:
function cauta called 5 returned 100% blocks executed 100%
        5:   13:extern int cauta(Lista * lista, char nume[]) {
       10:   14:	for (int j = 0; j < lista->lungime; j++) {
        5:   14-block  0
        5:   14-block  1
       10:   14-block  2
branch  0 taken 9
branch  1 taken 1 (fallthrough)
        9:   15:		if (strcmp(nume, lista->v[j]->denumire) == 0) return j;
        9:   15-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 5
        4:   15-block  1
        -:   16:	}
        1:   17:	return -1;
        1:   17-block  0
        -:   18:}
function update called 1 returned 100% blocks executed 100%
        1:   19:extern void update(Lista * lista, int cant, int index) {
        1:   20:	lista->v[index]->cantitate += cant;
        1:   21:}
function remove_prod called 1 returned 100% blocks executed 100%
        1:   22:extern void remove_prod(Lista *lista, int index) {
        1:   23:	free(lista->v[index]->denumire);
        1:   24:	free(lista->v[index]->producator);
        1:   25:	free(lista->v[index]);
        4:   26:	for (int i = index; i < lista->lungime; i++)
        1:   26-block  0
        4:   26-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:   27:	{
        3:   28:		lista->v[i] = lista->v[i + 1];
        3:   28-block  0
        -:   29:	}
        1:   30:	lista->lungime--;
        1:   31:}
        -:   32:
function ordonare called 4 returned 100% blocks executed 100%
        4:   33:extern void ordonare(Lista* lista, Lista* aux, int(*func)(Produs, Produs)) {
        -:   34:    //initializam aux
       16:   35:    for(int i=0;i<lista->lungime;i++)
        4:   35-block  0
       16:   35-block  1
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:   36:        adauga(aux,duplicatePr(lista->v[i]));
       12:   36-block  0
call    0 returned 12
call    1 returned 12
        -:   37:
        4:   38:	int ok = 1;
       12:   39:	while (ok)
        4:   39-block  0
       12:   39-block  1
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:   40:	{
        8:   41:		ok = 0;
       24:   42:		for(int j = 0; j < aux->lungime - 1; j++)
        8:   42-block  0
       16:   42-block  1
       24:   42-block  2
branch  0 taken 16
branch  1 taken 8 (fallthrough)
       16:   43:			if (func(*aux->v[j], *aux->v[j + 1]) > 0)
       16:   43-block  0
call    0 returned 16
branch  1 taken 6 (fallthrough)
branch  2 taken 10
        -:   44:			{
        6:   45:				Produs *temp = aux->v[j];
        6:   46:				aux->v[j] = aux->v[j + 1];
        6:   47:				aux->v[j + 1] = temp;
        6:   48:				ok = 1;
        6:   48-block  0
        -:   49:			}
        -:   50:	}
        4:   51:}
function modificare called 1 returned 100% blocks executed 100%
        1:   52:extern void modificare(Lista *l, int index, int cant) {
        1:   53:	l->v[index]->cantitate = cant;
        1:   54:}
function filtr_litera called 2 returned 100% blocks executed 100%
        2:   55:extern void filtr_litera(Lista *lista, Lista* aux, char litera[]) {
        2:   56:	int i = 0;
       10:   57:	for (int j = 0; j < lista->lungime; j++)
        2:   57-block  0
        8:   57-block  1
       10:   57-block  2
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:   58:	{
        8:   59:		if (lista->v[j]->denumire[0] == litera[0]) {
        8:   59-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        2:   60:			if (i == aux->capacitate)
        2:   60-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   61:			{
        1:   62:				redim(aux);
        1:   62-block  0
call    0 returned 1
        -:   63:			}
        2:   64:			aux->v[i] = lista->v[j];
        2:   65:			i++;
        2:   65-block  0
        -:   66:		}
        -:   67:	}
        2:   68:	aux->lungime = i;
        2:   69:}
        -:   70:
function filtr_cantitate called 2 returned 100% blocks executed 100%
        2:   71:extern void filtr_cantitate(Lista *lista, Lista* aux, int cant) {
        2:   72:	int i = 0;
        8:   73:	for (int j = 0; j < lista->lungime; j++)
        2:   73-block  0
        6:   73-block  1
        8:   73-block  2
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:   74:	{
        6:   75:		if (lista->v[j]->cantitate < cant) {
        6:   75-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:   76:			  if(i == aux->capacitate)
        3:   76-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:   77:			  {
        2:   78:				  redim(aux);
        2:   78-block  0
call    0 returned 2
        -:   79:			  }
        3:   80:			  aux->v[i] = lista->v[j];
        3:   81:			  i++;
        3:   81-block  0
        -:   82:		}
        -:   83:	}
        2:   84:	aux->lungime = i;
        2:   85:}
        -:   86:
function validare_cantitate called 2 returned 100% blocks executed 100%
        2:   87:extern int validare_cantitate(int cantitate)
        -:   88:{
        2:   89:	if(cantitate < 0) return 0;
        2:   89-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   89-block  1
        1:   90:	return 1;
        1:   90-block  0
        -:   91:}
function validare_nume called 2 returned 100% blocks executed 100%
        2:   92:extern int validare_nume(char nume[])
        -:   93:{
        2:   94:	if (strlen(nume) < 3) return 0;
        2:   94-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   94-block  1
        1:   95:	return 1;
        1:   95-block  0
        -:   96:}
        -:   97:
function validare_producator called 2 returned 100% blocks executed 100%
        2:   98:extern int validare_producator(char producator[])
        -:   99:{
        2:  100:	if (strlen(producator) < 3) return 0;
        2:  100-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  100-block  1
        1:  101:	return 1;
        1:  101-block  0
        -:  102:}
function criteriu_nume_cresc called 6 returned 100% blocks executed 100%
        6:  103:extern int criteriu_nume_cresc(Produs a, Produs b) {
        6:  104:	return strcmp(a.denumire, b.denumire) > 0;
        6:  104-block  0
        -:  105:}
function criteriu_nume_descr called 2 returned 100% blocks executed 100%
        2:  106:extern int criteriu_nume_descr(Produs a, Produs b) {
        2:  107:	return strcmp(a.denumire, b.denumire) < 0;
        2:  107-block  0
        -:  108:}
function criteriu_cant_cresc called 2 returned 100% blocks executed 100%
        2:  109:extern int criteriu_cant_cresc(Produs a, Produs b) {
        2:  110:	return a.cantitate > b.cantitate;
        2:  110-block  0
        -:  111:}
function criteriu_cant_descr called 6 returned 100% blocks executed 100%
        6:  112:extern int criteriu_cant_descr(Produs a, Produs b) {
        6:  113:	return a.cantitate < b.cantitate;
        6:  113-block  0
        -:  114:}
