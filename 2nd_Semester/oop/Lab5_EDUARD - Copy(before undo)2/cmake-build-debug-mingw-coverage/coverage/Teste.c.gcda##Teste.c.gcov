        -:    0:Source:C:/eu/ubb/2nd_Semester/oop/Lab5_EDUARD/Teste.c
        -:    0:Graph:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\Teste.c.gcno
        -:    0:Data:C:\eu\ubb\2nd_Semester\oop\Lab5_EDUARD\cmake-build-debug-mingw-coverage\CMakeFiles\Lab5_EDUARD.dir\Teste.c.gcda
        -:    0:Runs:1
        -:    1:#include "Teste.h"
        -:    2:#include <assert.h>
        -:    3:#include "service/Service.h"
        -:    4:#include <string.h>
        -:    5:#include "list/listamea.h"
        -:    6:
function test_adaugare called 1 returned 100% blocks executed 89%
        1:    7:void test_adaugare()
        -:    8:{
        1:    9:	Lista* lista=creareLi();
        1:    9-block  0
call    0 returned 1
        1:   10:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   11:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:   12:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
       1*:   13:	assert(lista->lungime == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   13-block  0
call    2 never executed
        1:   13-block  1
        1:   14:	distrugator(lista);
        1:   14-block  0
call    0 returned 1
        1:   15:}
        -:   16:
function test_cautare called 1 returned 100% blocks executed 86%
        1:   17:void test_cautare()
        -:   18:{
        1:   19:	Lista* lista=creareLi();
        1:   19-block  0
call    0 returned 1
        1:   20:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   21:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:   22:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
       1*:   23:	assert(cauta(lista, "Miere") == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   23-block  0
call    3 never executed
        1:   23-block  1
       1*:   24:	assert(cauta(lista, "Paine") == -1);
        1:   24-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   24-block  1
call    3 never executed
        1:   24-block  2
        1:   25:	distrugator(lista);
        1:   25-block  0
call    0 returned 1
        1:   26:}
        -:   27:
function test_update called 1 returned 100% blocks executed 89%
        1:   28:void test_update()
        -:   29:{
        1:   30:	Lista* lista=creareLi();
        1:   30-block  0
call    0 returned 1
        1:   31:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   32:	int index = cauta(lista, "Zahar");
call    0 returned 1
        1:   33:	update(lista, 150, index);
call    0 returned 1
       1*:   34:	assert(lista->v[0]->cantitate == 250);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   34-block  0
call    2 never executed
        1:   34-block  1
        1:   35:	distrugator(lista);
        1:   35-block  0
call    0 returned 1
        1:   36:}
        -:   37:
function test_remove called 1 returned 100% blocks executed 91%
        1:   38:void test_remove()
        -:   39:{
        1:   40:	Lista* lista=creareLi();
        1:   40-block  0
call    0 returned 1
        1:   41:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   42:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:   43:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
        1:   44:	int index = cauta(lista, "Zahar");
call    0 returned 1
        1:   45:	remove_prod(lista, index);
call    0 returned 1
       1*:   46:	assert(lista->lungime == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   46-block  0
call    2 never executed
        1:   46-block  1
        1:   47:	distrugator(lista);
        1:   47-block  0
call    0 returned 1
        1:   48:}
        -:   49:
function test_ordonare called 1 returned 100% blocks executed 87%
        1:   50:void test_ordonare() {
        1:   51:	Lista* lista=creareLi();
        1:   51-block  0
call    0 returned 1
        1:   52:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   53:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:   54:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
        -:   55:
        1:   56:	Lista* aux=creareLi();
call    0 returned 1
        1:   57:	ordonare(lista, aux, criteriu_nume_cresc);
call    0 returned 1
       1*:   58:	assert(strcmp(aux->v[0]->denumire, "Miere") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  0
call    2 never executed
        1:   58-block  1
        1:   59:    distrugator(aux);
        1:   59-block  0
call    0 returned 1
        -:   60:
        1:   61:    aux=creareLi();
call    0 returned 1
        1:   62:	ordonare(lista, aux, criteriu_nume_descr);
call    0 returned 1
       1*:   63:	assert(strcmp(aux->v[0]->denumire, "Zahar") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   63-block  0
call    2 never executed
        1:   63-block  1
        1:   64:    distrugator(aux);
        1:   64-block  0
call    0 returned 1
        -:   65:
        1:   66:	aux=creareLi();
call    0 returned 1
        1:   67:	ordonare(lista, aux, criteriu_cant_cresc);
call    0 returned 1
       1*:   68:	assert(aux->v[0]->cantitate == 100);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   68-block  0
call    2 never executed
        1:   68-block  1
        1:   69:    distrugator(aux);
        1:   69-block  0
call    0 returned 1
        -:   70:
        1:   71:	aux=creareLi();
call    0 returned 1
        1:   72:	ordonare(lista, aux, criteriu_cant_descr);
call    0 returned 1
       1*:   73:	assert(aux->v[0]->cantitate == 300);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   73-block  0
call    2 never executed
        1:   73-block  1
        1:   74:    distrugator(aux);
        1:   74-block  0
call    0 returned 1
        -:   75:
        1:   76:	distrugator(lista);
call    0 returned 1
        1:   77:}
        -:   78:
function test_modificare called 1 returned 100% blocks executed 91%
        1:   79:void test_modificare() {
        1:   80:	Lista* lista=creareLi();
        1:   80-block  0
call    0 returned 1
        1:   81:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   82:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:   83:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
        1:   84:	int index = cauta(lista, "Zahar");
call    0 returned 1
        1:   85:	modificare(lista, index, 150);
call    0 returned 1
       1*:   86:	assert(lista->v[0]->cantitate == 150);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   86-block  0
call    2 never executed
        1:   86-block  1
        1:   87:	distrugator(lista);
        1:   87-block  0
call    0 returned 1
        1:   88:}
        -:   89:
function test_filtrLit called 1 returned 100% blocks executed 89%
        1:   90:void test_filtrLit() {
        1:   91:	Lista* lista=creareLi();
        1:   91-block  0
call    0 returned 1
        1:   92:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:   93:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:   94:	add(lista, "Zanzibar", "Bolt", 150);
call    0 returned 1
        1:   95:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
        1:   96:	Lista* aux=creareLi();
call    0 returned 1
        -:   97:
        1:   98:	filtr_litera(lista, aux, "Z");
call    0 returned 1
       1*:   99:	assert(aux->lungime == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  0
call    2 never executed
        1:   99-block  1
        1:  100:	eliberator(aux);
        1:  100-block  0
call    0 returned 1
        -:  101:
        1:  102:	aux=creareLi();
call    0 returned 1
        1:  103:	filtr_litera(lista, aux, "B");
call    0 returned 1
       1*:  104:	assert(aux->lungime == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  104-block  0
call    2 never executed
        1:  104-block  1
        1:  105:    eliberator(aux);
        1:  105-block  0
call    0 returned 1
        -:  106:
        1:  107:	distrugator(lista);
call    0 returned 1
        1:  108:}
        -:  109:
function test_filtrCant called 1 returned 100% blocks executed 89%
        1:  110:void test_filtrCant() {
        1:  111:	Lista* lista=creareLi();
        1:  111-block  0
call    0 returned 1
        1:  112:	add(lista, "Zahar", "Tarom", 100);
call    0 returned 1
        1:  113:	add(lista, "Sare", "Wizz", 200);
call    0 returned 1
        1:  114:	add(lista, "Miere", "Asus", 300);
call    0 returned 1
        -:  115:
        1:  116:	Lista* aux=creareLi();
call    0 returned 1
        1:  117:	filtr_cantitate(lista, aux, 100);
call    0 returned 1
       1*:  118:	assert(aux->lungime == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  118-block  0
call    2 never executed
        1:  118-block  1
        1:  119:    eliberator(aux);
        1:  119-block  0
call    0 returned 1
        -:  120:
        1:  121:	aux=creareLi();
call    0 returned 1
        1:  122:	filtr_cantitate(lista, aux, 400);
call    0 returned 1
       1*:  123:	assert(aux->lungime == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  123-block  0
call    2 never executed
        1:  123-block  1
        1:  124:    eliberator(aux);
        1:  124-block  0
call    0 returned 1
        -:  125:
        1:  126:	distrugator(lista);
call    0 returned 1
        1:  127:}
function test_validare called 1 returned 100% blocks executed 76%
        1:  128:void test_validare()
        -:  129:{
       1*:  130:	assert(validare_cantitate(500));
        1:  130-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  130-block  1
call    3 never executed
        1:  130-block  2
       1*:  131:	assert(!validare_cantitate(-100));
        1:  131-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  131-block  1
call    3 never executed
        1:  131-block  2
       1*:  132:	assert(validare_nume("Zahar"));
        1:  132-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  132-block  1
call    3 never executed
        1:  132-block  2
       1*:  133:	assert(!validare_nume("Ae"));
        1:  133-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  133-block  1
call    3 never executed
        1:  133-block  2
       1*:  134:	assert(validare_producator("Tarom"));
        1:  134-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  134-block  1
call    3 never executed
        1:  134-block  2
       1*:  135:	assert(!validare_producator("Ae"));
        1:  135-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  135-block  1
call    3 never executed
        1:  135-block  2
        1:  136:}
