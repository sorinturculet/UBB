     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  %include "functii.asm"
     1                              <1> %ifndef __functie__
     2                              <1> %define __functie__
     3                              <1> 
     4                              <1>     extern scanf
     5                              <1>     import scanf msvcrt.dll
     6                              <1>     citirecuvant:
     7 00000000 8B442408            <1>          mov eax,[esp+8];textfinal
     8 00000004 8B5C240C            <1>          mov ebx,[esp+12];text
     9 00000008 8B4C2404            <1>          mov ecx,[esp+4];formats
    10 0000000C 89C7                <1>          mov edi,eax
    11                              <1>          citire:
    12 0000000E 60                  <1>             pushad
    13                              <1>             
    14 0000000F 53                  <1>             push dword ebx
    15 00000010 51                  <1>             push dword ecx
    16 00000011 FF15[00000000]      <1>             call[scanf]
    17 00000017 83C408              <1>             add esp,4*2 ;citim primul cuvant
    18                              <1>             
    19 0000001A 61                  <1>             popad
    20                              <1>             
    21 0000001B 89DE                <1>             mov esi,ebx
    22                              <1>             
    23 0000001D 51                  <1>             push ecx
    24                              <1>             
    25 0000001E B900000000          <1>             mov ecx,0
    26                              <1>             finalesi:
    27 00000023 41                  <1>             inc ecx,
    28 00000024 46                  <1>                 inc esi
    29 00000025 803E00              <1>                 cmp [esi],byte 0
    30 00000028 75F9                <1>                 jnz finalesi
    31 0000002A 4E                  <1>             dec esi; in momentul acesta esi arata inspre ultima litera a cuvantului, si ecx numarul de litere
    32                              <1>             
    33 0000002B 803E2E              <1>             cmp [esi],byte'.'
    34 0000002E 7507                <1>             jnz repeta
    35 00000030 49                  <1>                 dec ecx
    36 00000031 4E                  <1>                 dec esi
    37 00000032 BA2E000000          <1>                 mov edx,'.'; daca suntem la ultimul cuvant ii dam lui edx '.'
    38                              <1>             
    39                              <1>             repeta:
    40 00000037 FD                  <1>                 std
    41 00000038 AC                  <1>                 lodsb
    42 00000039 8807                <1>                 mov [edi],al
    43 0000003B 47                  <1>                 inc edi
    44 0000003C E2F9                <1>             loop repeta
    45                              <1>             
    46 0000003E C60720              <1>             mov [edi],byte ' '
    47 00000041 47                  <1>             inc edi
    48                              <1>             
    49                              <1>             
    50 00000042 59                  <1>             pop ecx
    51 00000043 83FA2E              <1>             cmp edx,'.'
    52 00000046 75C6                <1>             jnz citire
    53                              <1>             
    54 00000048 C20C00              <1>     ret 12
    55                              <1> %endif
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 0000004B 496E74726F64756365-         mesaj db "Introduceti propozitia:",0
    13 00000054 74692070726F706F7A-
    13 0000005D 697469613A00       
    14 00000063 257300                      format db "%s",0
    15 00000066 00<rept>                    text times 101 db 0
    16 000000CB 00<rept>                    textfinal times 101 db 0
    17                                      
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 68[4B000000]                    push dword mesaj
    22 00000005 FF15[00000000]                  call[printf]
    23 0000000B 83C404                          add esp,4
    24                                          
    25                                          
    26 0000000E 68[66000000]                        push dword text
    27 00000013 68[CB000000]                        push dword textfinal
    28 00000018 68[63000000]                        push dword format
    29 0000001D E8(00000000)                        call citirecuvant
    30                                              
    31 00000022 68[CB000000]                    push dword textfinal
    32 00000027 FF15[00000000]                  call[printf]
    33 0000002D 83C404                          add esp,4
    34                                          ; exit(0)
    35 00000030 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 00000032 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
