     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern printf
     9                                  extern scanf
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 496E74726F64756365-         mesajsir db "Introduceti un sir de caractere(20 maxim):",0
    16 00000009 746920756E20736972-
    16 00000012 206465206361726163-
    16 0000001B 74657265283230206D-
    16 00000024 6178696D293A00     
    17 0000002B 496E74726F64756365-         mesajn db "Introduceti un numar reprezentat pe un octet:",0
    17 00000034 746920756E206E756D-
    17 0000003D 61722072657072657A-
    17 00000046 656E74617420706520-
    17 0000004F 756E206F637465743A-
    17 00000058 00                 
    18 00000059 <res 00000016>              sir resb 22
    19 0000006F 00000000                    n dd 0
    20 00000073 256400                      formatn db "%d",0
    21 00000076 257300                      formatsir db "%s",0
    22 00000079 00<rept>                    sirpar times 61 db 0
    23                                      
    24                                  ;Se citeste de la tastatura un cuvant (sir de caractere de maxim 20 de caractere) si un numar reprezentat pe un octet. Daca numarul este impar se cere criptarea cuvantului prin adunarea la fiecare caracter a numarul
    25                                  
    26                                  
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 68[00000000]                    push mesajsir
    30 00000005 FF15[00000000]                  call[printf]
    31 0000000B 83C404                          add esp,4   ;afisam mesaj
    32                                          
    33 0000000E 68[59000000]                    push sir
    34 00000013 68[76000000]                    push formatsir
    35 00000018 FF15[00000000]                  call[scanf]
    36 0000001E 83C408                          add esp,4*2 ;citim sirul
    37                                          
    38 00000021 68[2B000000]                    push mesajn
    39 00000026 FF15[00000000]                  call[printf]
    40 0000002C 83C404                          add esp,4   ;afisam mesaj
    41                                          
    42 0000002F 68[6F000000]                    push n
    43 00000034 68[73000000]                    push formatn
    44 00000039 FF15[00000000]                  call[scanf]
    45 0000003F 83C408                          add esp,4*2;citim numarul
    46                                          
    47 00000042 A1[6F000000]                    mov eax,[n]
    48 00000047 B101                            mov cl,1
    49 00000049 D3D8                            rcr eax,cl
    50 0000004B 7202                            jc impar
    51 0000004D 7330                            jnc par ;verificam daca numarul este impar prin rotirea sa cu carry o pozitie la dreapta. Un nr impar => cel mai nesemnificativ bit=1
    52                                          
    53                                              impar:
    54 0000004F BE[59000000]                        mov esi,sir
    55 00000054 A1[6F000000]                        mov eax,[n]
    56 00000059 BA00000000                          mov edx,0   ;edx:eax=n
    57 0000005E B914000000                          mov ecx,20  ;ecx=20
    58 00000063 F7F9                                idiv ecx    ;edx=n%20, mai exact dl=n%20, deoarece restul este reprezentat pe un byte( 0<=rest<20)
    59                                              
    60                                                  repetaimpar:
    61 00000065 803E00                                  cmp [esi],byte 0    ;verificam daca am ajuns la finalul cuvantului
    62 00000068 7405                                    je finalimpar       ;daca da am terminat criptarea
    63 0000006A 0016                                    add [esi],byte dl   ;adaugam dl, care este n%20
    64 0000006C 46                                      inc esi             ;incrementam sa mergem mai departe in sir
    65 0000006D EBF6                                    jmp repetaimpar
    66                                              finalimpar:
    67 0000006F 68[59000000]                        push sir
    68 00000074 FF15[00000000]                      call[printf]
    69 0000007A 83C404                              add esp,4       ;afisam textfinal
    70 0000007D EB69                                jmp final       ;iesim din program
    71                                              
    72                                              
    73                                              par:
    74 0000007F BE[59000000]                        mov esi,sir     ;punem in esi destinatia sirului mama
    75 00000084 BF[79000000]                        mov edi,sirpar  ;punem in edi destinatia sirului final
    76 00000089 FC                                  cld             ;lucram cu movsb deci dam clear la direction flag
    77                                                  repetapar:
    78 0000008A 803E00                                  cmp [esi],byte 0
    79 0000008D 7449                                    je finalpar     ;verificam daca am ajuns la finalul cuvantului, astfel sarim la afisare
    80 0000008F A4                                      movsb       ;am mutat litera in cuvant
    81 00000090 807EFF41                                cmp [esi-1],byte 'A'
    82 00000094 7440                                        je vocala
    83 00000096 807EFF45                                cmp [esi-1],byte 'E'
    84 0000009A 743A                                        je vocala
    85 0000009C 807EFF49                                cmp [esi-1],byte 'I'
    86 000000A0 7434                                        je vocala
    87 000000A2 807EFF4F                                cmp [esi-1],byte 'O'
    88 000000A6 742E                                        je vocala
    89 000000A8 807EFF55                                cmp [esi-1],byte 'U'
    90 000000AC 7428                                        je vocala
    91 000000AE 807EFF61                                cmp [esi-1],byte 'a'
    92 000000B2 7422                                        je vocala
    93 000000B4 807EFF65                                cmp [esi-1],byte 'e'
    94 000000B8 741C                                        je vocala
    95 000000BA 807EFF69                                cmp [esi-1],byte 'i'
    96 000000BE 7416                                        je vocala
    97 000000C0 807EFF6F                                cmp [esi-1],byte 'o'
    98 000000C4 7410                                        je vocala
    99 000000C6 807EFF75                                cmp [esi-1],byte 'u'
   100 000000CA 740A                                        je vocala          ;verificam daca suntem la o consoana, daca suntem la vocala va sari peste urm 5 instructiuni
   101                                                      
   102 000000CC C60770                                  mov [edi],byte 'p'  
   103 000000CF 47                                      inc edi
   104 000000D0 8A46FF                                  mov al,[esi-1]
   105 000000D3 8807                                    mov [edi],al
   106 000000D5 47                                      inc edi            ;adaugam structura p+consoara dupa vocala
   107                                                  
   108                                                  vocala:
   109 000000D6 EBB2                                    jmp repetapar
   110                                              finalpar:
   111 000000D8 68[79000000]                        push sirpar
   112 000000DD FF15[00000000]                      call[printf]
   113 000000E3 83C404                              add esp,4       ;afisam textfinal
   114 000000E6 EB00                                jmp final       ;iesim din program
   115                                          
   116                                          final:
   117 000000E8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   118 000000EA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
