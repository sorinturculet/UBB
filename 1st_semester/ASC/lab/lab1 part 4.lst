     1                                  ;(a*2)+2*(b-3)-d-2*c
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global start        
     6                                  
     7                                  ; declare external functions needed by our program
     8                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 0200                        a dw 2
    15 00000002 0400                        b dw 4
    16 00000004 0500                        c dw 5
    17 00000006 0400                        d dw 4
    18                                      doi EQU 2
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 66A1[00000000]                  mov AX,[a];AX=a
    23 00000006 66BB0200                        mov BX,2; BX=2
    24 0000000A 66F7E3                          mul BX; DX:AX=a*2
    25 0000000D 6652                            push DX
    26 0000000F 6650                            push AX
    27 00000011 59                              pop ECX;ECX=a*2
    28                                          
    29 00000012 668B1D[02000000]                mov BX,[b];CX=b
    30 00000019 6683EB03                        sub BX,3;CX=b-3
    31 0000001D 66B80200                        mov AX,2; AX=2
    32 00000021 66F7E3                          mul BX;DX:BX= 2*(b-3)
    33 00000024 6652                            push DX
    34 00000026 6650                            push AX
    35 00000028 5B                              pop EBX; EBX=2*(b-3)
    36                                          
    37 00000029 01CB                            add EBX,ECX;EBX=a*2+2*(b-3)
    38                                          
    39 0000002B 66A1[04000000]                  mov AX,[c];AX=c
    40 00000031 66B90200                        mov CX,2;CX=2
    41 00000035 66F7E1                          mul CX; DX:AX=c*2
    42 00000038 6652                            push DX
    43 0000003A 6650                            push AX
    44 0000003C 59                              pop ECX;ECX=c*2
    45                                          
    46 0000003D 2B1D[06000000]                  sub EBX,[d];EBX=2*(b-3)-d
    47 00000043 29CB                            sub EBX,ECX;EBX=2*(b-3)-d-c*2
    48                                          
    49                                          ; exit(0)
    50 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
